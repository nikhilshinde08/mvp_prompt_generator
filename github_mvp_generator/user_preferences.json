{
  "default_provider": "groq",
  "preferred_tech_stacks": [
    "React",
    "**TECH STACK:**  \nPython",
    "Bash",
    "Docker",
    "NumPy",
    "pandas",
    "PyTorch",
    "scikit\u2011learn",
    "LightGBM",
    "XGBoost",
    "joblib",
    "tqdm",
    "pyarrow",
    "dill",
    "matplotlib",
    "seaborn",
    "plotly",
    "SQLAlchemy",
    "PyMongo",
    "Redis",
    "OpenAI",
    "RD\u2011Agent",
    "pytest",
    "Sphinx",
    "ReadTheDocs",
    "MyPy",
    "Pylint",
    "pre\u2011commit",
    "GitHub\u202fActions",
    "DeepSource",
    "setuptools",
    "wheel",
    "Make",
    "Git  \n\n**Context / Role of Major Items**\n\n- **Python** \u2013 primary implementation language for the whole platform.  \n- **Bash** \u2013 used in helper scripts (e.g.",
    "`build_docker_image.sh`",
    "Makefile commands).  \n- **Docker** \u2013 provides reproducible runtime environments; the repo ships a `Dockerfile`.  \n- **NumPy** \u2013 foundational array library for fast numerical computation.  \n- **pandas** \u2013 core data\u2011frame handling for market data loading",
    "preprocessing",
    "and feature engineering.  \n- **PyTorch** \u2013",
    "**TECH STACK**\n\nPython",
    "JavaScript (Node)",
    "GitHub Actions",
    "Conda",
    "pip",
    "PyTest",
    "Coverage.py",
    "Pre\u2011commit",
    "Black",
    "Flake8",
    "SciPy",
    "TensorFlow\u202f(optional)",
    "CatBoost",
    "Matplotlib",
    "Seaborn",
    "Plotly",
    "PyYAML",
    "cloudpickle",
    "h5py",
    "SQLite (via\u202fSQLAlchemy)",
    "Parquet/Feather files",
    "CSV",
    "Redis (optional cache)",
    "OpenAPI (for RD\u2011Agent integration)  \n\n---\n\n### Brief context for each major item  \n\n- **Python** \u2013 Core language for the entire Qlib code\u2011base and all quant\u2011research pipelines.  \n- **Bash** \u2013 Used in helper scripts (`build_docker_image.sh`",
    "`Makefile` targets) for building",
    "testing and packaging.  \n- **JavaScript (Node)** \u2013 Required by `.commitlintrc.js` for commit\u2011message linting in the development workflow.  \n- **Docker** \u2013 Provides an",
    "**TECH STACK:**  \nPython\u202f3.8+",
    "numpy",
    "statsmodels",
    "SQLite",
    "PostgreSQL (optional)",
    "Redis (optional)",
    "Docker\u2011Compose",
    "mypy",
    "pylint",
    "conda",
    "Commitlint",
    "Microsoft\u202fRD\u2011Agent",
    "loguru",
    "fire",
    "dill  \n\n---  \n\n**Brief context for each major item**\n\n- **Python\u202f3.8+** \u2013 Core runtime language for the entire Qlib platform.  \n- **pandas / numpy** \u2013 Fundamental data\u2011manipulation and numerical libraries used throughout the data pipeline and model training.  \n- **pyarrow** \u2013 Enables fast columnar storage (Parquet) and zero\u2011copy data exchange between pandas and the on\u2011disk dataset.  \n- **tqdm** \u2013 Provides progress bars for long\u2011running data\u2011processing and training loops.  \n- **joblib / dill** \u2013 Used for efficient model serialization and parallel job execution.  \n- **scikit\u2011learn** \u2013 Supplies classic ML algorithms and utilities (e.g.",
    "cross\u2011validation",
    "pipelines).  \n- **PyTorch** \u2013 Primary deep\u2011learning framework for neural\u2011network\u2011based quant models and RL agents.  \n- **LightGBM",
    "CatBoost** \u2013 Gradient\u2011boosting libraries offering high\u2011performance tree\u2011based models",
    "heavily used in benchmark experiments.  \n- **matplotlib",
    "plotly** \u2013 Visualization stack",
    "**TECH STACK:**  \nTypeScript",
    "JavaScript (ES2020)",
    "Vue",
    "Angular",
    "Express",
    "Node.js",
    "pnpm",
    "Vite",
    "Rollup",
    "ESLint",
    "Stylelint",
    "Git",
    "CSS",
    "HTML",
    "Browser (Chromium) APIs  \n\n**Context / Role of Major Items**\n\n- **TypeScript** \u2013 Primary language; provides static typing and modern ECMAScript features for the whole code\u2011base.  \n- **JavaScript (ES2020)** \u2013 Runtime fallback for compiled TypeScript modules and for scripts that run directly in the Discord client.  \n- **React** \u2013 Used for the settings panels",
    "plugin UI and most interactive components injected into Discord.  \n- **Vue** \u2013 Included for a few legacy or experimental UI widgets; not the main UI framework but compiled alongside React.  \n- **Angular** \u2013 Present only for a small set of helper components (e.g.",
    "demo pages); its presence is detected by the build config.  \n- **Express** \u2013 Small local development server (started by `scripts/`)",
    "serves compiled assets and provides a hot\u2011reload endpoint during plugin development.  \n- **Node.js** \u2013 Execution environment for build scripts",
    "the Express dev server",
    "and for publishing the extension via pnpm.  \n- **pnpm** \u2013 Workspace\u2011aware package manager used to install",
    "link",
    "and hoist dependencies across the monorepo (`pnpm-workspace.yaml`).  \n- **Vite** \u2013 Fast development bundler that compiles TypeScript/React/Vue files",
    "handles HMR and outputs the final browser\u2011compatible bundle.  \n- **Rollup** \u2013 Production bundler used to create the minified",
    "self\u2011contained `vencord.js` that gets injected into Discord.  \n- **ESLint** \u2013 Linting engine (`eslint.config.mjs`) that enforces code style and catches bugs across the TypeScript/JS sources.  \n- **Stylelint** \u2013 CSS/SCSS linter (`.stylelintrc.json`) that keeps the styling of UI components consistent.  \n- **GitHub Actions** \u2013 CI pipeline located in `.github/` that runs linting",
    "type\u2011checking",
    "builds the extension",
    "and publishes release artifacts.  \n- **Git** \u2013 Version\u2011control system for the repository (standard `.gitignore`",
    "`.gitattributes`).  \n- **CSS** \u2013 Styling language for React/Vue components; often written as CSS modules or with CSS\u2011in\u2011JS helpers.  \n- **HTML** \u2013 Minimal static pages (e.g.",
    "documentation or demo pages) bundled by Vite/Rollup.  \n- **",
    "**TECH STACK:**  \nC",
    "GNU\u202fMake",
    "Bash/Shell",
    "Perl",
    "Python",
    "Kconfig",
    "OpenWrt Buildroot",
    "GCC/Clang toolchain",
    "uClibc\u202f/\u202fmusl",
    "BusyBox",
    "libnl",
    "OpenSSL",
    "libubox",
    "libuci",
    "LuCI (web UI framework)",
    "Docker (devcontainer)",
    "VS\u202fCode Remote\u202fContainers",
    "QEMU (emulation)",
    "pkg\u2011config",
    "Autotools (configure scripts)\n\n**Brief context for each major item**\n\n- **C** \u2013 Core language for the kernel",
    "drivers",
    "and most user\u2011space utilities compiled for the router firmware.  \n- **GNU\u202fMake** \u2013 Primary build orchestrator; the repository contains `Makefile`",
    "`BSDmakefile`",
    "and many package\u2011specific makefiles.  \n- **Bash/Shell** \u2013 Used extensively in the `scripts/` directory for environment setup",
    "feed handling",
    "and image generation.  \n- **Perl** \u2013 Required by several OpenWrt helper scripts (e.g.",
    "`scripts/metadata.pl`",
    "feed management).  \n- **Python** \u2013 Utilized by some packaging utilities and optional test scripts; the devcontainer includes a Python runtime.  \n- **Kconfig** (`Config.in`) \u2013 Configuration system borrowed from the Linux kernel; drives the `make menuconfig` UI for selecting packages and kernel options.  \n- **OpenWrt Buildroot** \u2013 The overall build framework that stitches together the kernel",
    "toolchain",
    "and packages into a single firmware image.  \n- **GCC/Clang toolchain** \u2013 Cross\u2011compilation toolchain (gcc",
    "binutils",
    "ld",
    "ar",
    "etc.) generated in `toolchain/` and used to compile all C code for the target architecture.  \n- **uClibc\u202f/\u202fmusl** \u2013 Lightweight C standard libraries chosen for the target rootfs; selected via the OpenWrt build configuration.  \n- **BusyBox** \u2013 Provides a suite of common Unix utilities in a single binary",
    "forming the backbone of the router\u2019s user\u2011space environment.  \n- **libnl** \u2013 Netlink library used by networking utilities and kernel\u2011user\u2011space interaction code.  \n- **OpenSSL** \u2013 Supplies TLS/crypto primitives for secure services (e.g.",
    "HTTPS",
    "VPN).  \n- **libubox** \u2013 Core OpenWrt utility library (lists",
    "blobs",
    "event loops) used by many packages and the LuCI framework.  \n- **libuci** \u2013 Configuration library that parses the Unified Configuration Interface files (`/etc/config/*`).  \n- **LuCI** \u2013 Web\u2011based management interface written in Lua; pulled in as a package (`luci`) and compiled into the firmware.  \n- **GitHub Actions** \u2013 CI workflow defined in `.github/` for automated builds",
    "linting",
    "and release artifact generation.  \n- **Docker (devcontainer)** \u2013 The `.devcontainer/` folder defines a Docker image used by VS\u202fCode Remote Containers to provide a reproducible build environment.  \n- **VS\u202fCode Remote\u202fContainers** \u2013 Development ergonomics layer; the repo ships a `devcontainer.json` to spin up the Docker\u2011based environment directly inside VS\u202fCode.  \n- **QEMU** \u2013",
    "**TECH STACK:**  \nBash\u202f(Shell)",
    "GNU\u202fCoreutils",
    "Android\u202fNDK",
    "dpkg\u202f(Debian packaging tools)",
    "apt\u202f(Termux package manager)",
    "JSON",
    "Termux (Android terminal environment)\n\n- **Bash (Shell)** \u2013 Primary language for all build scripts (`build\u2011all.sh`",
    "`build\u2011package.sh`",
    "`clean.sh`",
    "etc.).  \n- **GNU Coreutils** \u2013 Provides the standard Unix utilities (`sed`",
    "`awk`",
    "`grep`",
    "`tar`",
    "`gzip`",
    "\u2026) used throughout the scripts.  \n- **Git** \u2013 Version\u2011control system that hosts the source repository and is used for submodule handling and CI triggers.  \n- **GitHub Actions** \u2013 CI/CD platform defined in `.github/` workflows to automatically build",
    "test",
    "and publish packages on push/pull\u2011request events.  \n- **Android NDK** \u2013 Native Development Kit required to compile C/C++ code for the Android architecture targeted by Termux packages.  \n- **dpkg (Debian packaging tools)** \u2013 Generates `.deb` packages (`dpkg-deb`",
    "`dpkg\u2011gencontrol`",
    "etc.) that Termux\u2019s package manager consumes.  \n- **apt (Termux package manager)** \u2013 Consumes the generated `.deb` files and provides the repository metadata (`repo.json`) for installation on Termux.  \n- **JSON** \u2013 Format of `repo.json` which describes package metadata (versions",
    "dependencies",
    "checksums) for the Termux package repository.  \n- **Termux (Android terminal environment)** \u2013 The target runtime where the built packages are installed and executed; also supplies the build environment (e.g.",
    "`pkg-config`",
    "`clang`",
    "`make`).",
    "**TECH STACK:**  \nBash (Shell)",
    "GNU Coreutils",
    "Debian\u202fPackaging (dpkg\u202f/\u202fapt)",
    "CMake",
    "Autotools",
    "Meson",
    "jq (or Python)",
    "Docker (inferred)",
    "OpenSSL (inferred)\n\n**What each technology does**\n\n- **Bash (Shell)** \u2013 Primary language; all build scripts (`build-all.sh`",
    "`build-package.sh`",
    "etc.) are Bash scripts orchestrating the compile\u2011and\u2011package workflow.  \n- **GNU Coreutils** \u2013 Provides the standard Unix utilities (`sed`",
    "`xz`",
    "\u2026) that the Bash scripts rely on for file manipulation and archiving.  \n- **Git** \u2013 Version\u2011control system used for the repository itself and for fetching upstream source tarballs; also powers the `git`\u2011based package metadata in `repo.json`.  \n- **GitHub\u202fActions** \u2013 CI/CD platform (found in the `.github/` directory) that automatically builds packages on each push/PR and publishes the resulting apt repository.  \n- **Debian\u202fPackaging (dpkg\u202f/\u202fapt)** \u2013 The output of the build system is a Debian\u2011style `.deb` package; tools like `dpkg-deb`",
    "`apt-ftparchive`",
    "and `apt-get` are used to create and index the Termux package repository.  \n- **Android\u202fNDK** \u2013 Cross\u2011compilation toolchain (C/C++ compiler",
    "linker",
    "sysroot) required to build native code that runs inside the Android environment provided by Termux.  \n- **Make** \u2013 Traditional build orchestrator used by many upstream projects; the Termux build scripts invoke `make` after configuring the source.  \n- **CMake** \u2013 Modern build system supported by many packages; the scripts detect a `CMakeLists.txt` and run `cmake` to generate native Makefiles.  \n- **Autotools** \u2013 (`configure`",
    "`automake`",
    "`libtool`) \u2013 the classic GNU build chain; the Termux system automatically runs `./configure` when present.  \n- **Meson** \u2013 Another contemporary build system; the scripts recognize a `meson.build` file and invoke `meson`/`ninja` to compile the package.  \n- **JSON",
    "**TECH STACK:**  \nPython\u202f3.11",
    "Poetry",
    "Ruff",
    "Pytest",
    "Docker\u202f/\u202fDevContainer",
    "LangChain",
    "LiteLLM",
    "OpenAI\u202fAPI",
    "Anthropic\u202fAPI",
    "TogetherAI\u202fAPI",
    "Pydantic",
    "Rich",
    "Typer",
    "HTTPX",
    "Tenacity",
    "FastAPI",
    "Uvicorn",
    "MkDocs (inferred)",
    "SQLite (inferred)\n\n**What each technology does**\n\n- **Python\u202f3.11** \u2013 Core programming language; provides the runtime for all agents and utilities.  \n- **Poetry** \u2013 Dependency\u2011 and packaging manager declared in `pyproject.toml`; handles virtual\u2011env creation",
    "lock\u2011file (`poetry.lock`) and publishing.  \n- **Ruff** \u2013 Fast linter/formatter used in CI (`ruff.toml`) to enforce code style and catch simple bugs.  \n- **MyPy** \u2013 Static type\u2011checker configured via `mypy.ini`; ensures type\u2011safety across the code base.  \n- **Pytest** \u2013 Test framework (see `pytest.ini` & `pytest_stochastics.json`) that runs unit\u2011 and integration\u2011tests for the agents.  \n- **GitHub\u202fActions** \u2013 CI pipeline defined in `.github/workflows/`; runs linting",
    "tests and builds on each push/PR.  \n- **Docker\u202f/\u202fDevContainer** \u2013 Development container (`.devcontainer/`) that provides a reproducible environment for contributors and can be used to ship the agents as containers.  \n- **LangChain** \u2013 High\u2011level framework for composing LLM\u2011driven chains; used to build the \u201ccontrol\u201d logic of the agents.  \n- **LiteLLM** \u2013 Thin abstraction over multiple LLM providers; lets the same code switch between OpenAI",
    "Anthropic",
    "TogetherAI",
    "etc.",
    "as listed in `llms.txt`.  \n- **OpenAI\u202fAPI**",
    "**Anthropic\u202fAPI**",
    "**TogetherAI\u202fAPI** \u2013 Primary LLM back\u2011ends that the agents call to generate text or perform reasoning.  \n- **Pydantic** \u2013 Data\u2011validation and settings management (used for model schemas and config objects).  \n- **Rich** \u2013 Fancy terminal rendering library; powers colourful logs and pretty\u2011printed outputs in the CLI.  \n- **Typer** \u2013 Simple CLI framework built on Click; provides the `parlant` command\u2011line interface found in `src/parlant/cli.py`.  \n- **HTTPX** \u2013 Async HTTP client used by LiteLLM and the agents to talk to external LLM endpoints.  \n- **Tenacity** \u2013 Retry library that adds exponential back\u2011off for flaky LLM calls.  \n- **FastAPI** \u2013 Optional HTTP server (exposed in `examples/`); enables running an agent as a micro\u2011service.  \n- **Uvicorn** \u2013 ASGI server that runs the FastAPI service in production or during local testing.  \n- **MkDocs",
    "Docker (DevContainer)",
    "Pre\u2011commit hooks",
    "LangChain (or generic LLM\u2011agent libraries)",
    "OpenAI / Anthropic / Cohere SDKs",
    "Loguru",
    "python\u2011dotenv",
    "SQLAlchemy (optional)\n\n---\n\n### What each major component does  \n\n| Category | Item | Role / Why it\u2019s in *parlant* |\n|----------|------|------------------------------|\n| **Language / Runtime** | **Python\u202f3.11** | Core implementation language; modern syntax & performance improvements. |\n| **Package / Dependency Manager** | **Poetry** (see `pyproject.toml`",
    "`poetry.lock`) | Handles deterministic dependency resolution",
    "virtual\u2011env creation",
    "and publishing. |\n| **Containerisation / Development Environment** | **Docker / VS\u202fCode DevContainer** (`.devcontainer/`) | Provides a reproducible dev environment (Linux base image",
    "Poetry) and is used by CI. |\n| **CI / Automation** | **GitHub Actions** (`.github/workflows/`) | Runs linting",
    "tests and builds on each PR/commit. |\n| **Linting & Formatting** | **Ruff** (`ruff.toml`) | Fast linter + auto\u2011formatter for style & code\u2011quality. |\n| **Static Type Checking** | **MyPy** (`mypy.ini`) | Enforces type safety across the code\u2011base. |\n| **Testing Framework** | **Pytest** (`pytest.ini`",
    "`tests/` under `src/` or `examples/`) | Unit / integration test runner; `pytest_stochastics.json` configures deterministic random seeds. |\n| **Git Hooks** | **Pre\u2011commit hooks** (`.githooks/`) | Enforce linting",
    "formatting",
    "and commit\u2011message standards before pushes. |\n| **Web / API Layer** | **FastAPI** (imported in `src/parlant/api/` or similar) | Light\u2011weight async framework exposing the LLM\u2011agent functionality as HTTP endpoints. |\n| **CLI Interface** | **Typer** (used in `src/parlant/cli.py`) | Generates a friendly command\u2011line interface for quick local experimentation. |\n| **LLM Integration** | **LangChain** (or a similar agent\u2011framework) | Provides abstractions for LLM calls",
    "prompt templating",
    "memory",
    "and tool\u2011use. |\n| | **OpenAI SDK**",
    "**Anthropic SDK**",
    "**Cohere SDK** (listed in `pyproject.toml`) | Direct API clients for the",
    "**TECH STACK:**  \nPython\u202f3",
    "Docker (VS\u202fCode\u202fDevContainer)",
    "pre\u2011commit hooks",
    "OpenAI SDK",
    "Anthropic SDK",
    "Cohere SDK",
    "Llama\u2011CPP\u2011Python",
    "Transformers",
    "Typer/Click",
    "SQLite (optional)",
    "JSON\u2011based config",
    "Sphinx (docs)\n\n---\n\n### Core Language & Runtime\n- **Python\u202f3** \u2013 Primary language for all source code; the project targets modern 3.x releases (\u22653.9) as declared in `pyproject.toml`.\n\n### Package & Dependency Management\n- **Poetry** \u2013 Used for dependency resolution",
    "virtual\u2011environment handling",
    "and publishing (`pyproject.toml`",
    "`poetry.lock`).  \n- **pip** \u2013 Fallback installer for any optional wheels not covered by Poetry.\n\n### Code Quality & Formatting\n- **Ruff** \u2013 Fast linter/formatter (`ruff.toml`) enforcing style and catching bugs.  \n- **MyPy** \u2013 Static type checker (`mypy.ini`) for the heavily typed codebase.  \n- **Pre\u2011commit hooks** (`.githooks`) \u2013 Run Ruff",
    "and other checks before commits.\n\n### Testing & CI\n- **Pytest** (`pytest.ini`) \u2013 Test runner for unit and integration tests.  \n- **GitHub Actions** (`.github/workflows/\u2026`) \u2013 CI pipeline that installs dependencies",
    "runs linting",
    "and test suites on each PR/commit.\n\n### Containerisation / Development Environment\n- **Docker / VS\u202fCode DevContainer** (`.devcontainer/`) \u2013 Provides a reproducible development container with the required Python version",
    "and all tooling pre\u2011installed. Enables \u201cdeploy in minutes\u201d.\n\n### Documentation\n- **Sphinx** (inferred from `docs/` and `pyproject.toml` config) \u2013 Generates HTML/Markdown docs for the library and examples.\n\n### Core Libraries (LLM\u2011Agent Stack)\n\n| Library | Role (1\u2011line) |\n|---------|---------------|\n| **LangChain** | High\u2011level framework for composing LLM\u2011driven agents",
    "and tool\u2011calling. |\n| **OpenAI SDK** (`openai`) | Direct API client for OpenAI models (GPT\u20113/4",
    "embeddings",
    "etc.). |\n| **Anthropic SDK** (`anthropic`) | API client for Claude models",
    "used as alternative LLM provider. |\n| **Cohere SDK** (`cohere`) | Client for Cohere\u2019s language models; enables multi\u2011provider flexibility. |\n| **Llama\u2011CPP\u2011Python** | Lightweight binding to run quantised LLaMA/llama\u20112 models locally. |\n| **Transformers** (`huggingface_hub`",
    "`torch`) | Provides access to a wide range of open\u2011source models and tokenizers. |\n| **Pydantic** | Data validation & settings management (used for agent configs & response schemas). |\n| **Typer / Click** | Simple CLI framework that powers the `parlant` command\u2011line utilities. |\n| **Rich** | Fancy terminal rendering for logs",
    "tables",
    "and agent diagnostics. |\n| **Loguru** | Structured",
    "easy\u2011to\u2011configure logging throughout the agents. |\n| **HTTPX** | Async\u2011compatible HTTP client used by SDK wrappers and custom tool calls. |\n| **SQLite (via `sqlite3` stdlib)** \u2013 *inferred* | Lightweight local storage for caching embeddings / agent state",
    "tiktoken",
    "Celery",
    "Alembic",
    "PostgreSQL (inferred)",
    "MkDocs (inferred)\n\n---\n\n### Stack breakdown  \n\n- **Python** \u2013 Primary implementation language; the whole code\u2011base",
    "examples and tests are written in modern Python\u202f3.10+.  \n- **Poetry** \u2013 Dependency & packaging manager declared in `pyproject.toml`; handles lock\u2011file (`poetry.lock`) and builds the distributable wheel.  \n- **FastAPI** \u2013 Light\u2011weight",
    "async web framework used to expose the LLM\u2011agent services as HTTP endpoints; chosen for its speed and automatic OpenAPI docs.  \n- **Uvicorn** \u2013 ASGI server that runs the FastAPI app in production (`uvicorn main:app`).  \n- **Pydantic** \u2013 Data\u2011validation and settings management library (v2) used for request/response models and environment configuration (`python\u2011dotenv`).  \n- **LangChain** \u2013 High\u2011level library for composing LLM\u2011driven agents",
    "tools",
    "and memory; core to the \u201cagents built for control\u201d functionality.  \n- **OpenAI\u202fAPI & Anthropic\u202fAPI** \u2013 Official SDKs (`openai`",
    "`anthropic`) to call LLM providers (GPT\u20114",
    "Claude",
    "etc.).  \n- **tiktoken** \u2013 Tokenizer library used to count tokens and enforce model limits.  \n- **HTTPX** \u2013 Async HTTP client employed by the SDK wrappers and for any external REST calls.  \n- **Rich** \u2013 Pretty\u2011printing & logging utilities for CLI output and debugging.  \n- **PyYAML** \u2013 Parses YAML configuration files shipped with examples and docs.  \n- **python\u2011dotenv** \u2013 Loads `.env` files so developers can store API keys locally.  \n- **Loguru** \u2013 Simplified",
    "structured logging throughout the agents.  \n- **Tenacity** \u2013 Retry",
    "VS\u202fCode DevContainer",
    "LlamaIndex (now called **Llama\u2011Index**)",
    "Click",
    "SQLite / PostgreSQL (SQLModel/SQLAlchemy)",
    "dotenv",
    "Jinja2",
    "pytest\u2011stochastics",
    "Sphinx (docs)\n\n---\n\n### What each major item does  \n\n| Category | Item | Role / Context |\n|----------|------|----------------|\n| **Programming language** | **Python** | Core language for all source code (`src/`) and the LLM\u2011agent logic. |\n| **Package & dependency manager** | **Poetry** | Declares the project\u2019s dependencies (`pyproject.toml`)",
    "handles virtual\u2011env creation",
    "lock\u2011file (`poetry.lock`) and publishing. |\n| **Static analysis / linting** | **Ruff** | Fast Python linter & formatter; configured via `ruff.toml`. |\n| | **MyPy** | Optional static type checker (`mypy.ini`). |\n| **Testing** | **Pytest** | Test runner (`pytest.ini`). |\n| | **pytest\u2011stochastics** | Fixture that makes tests deterministic when randomness is involved (see `pytest_stochastics.json`). |\n| **CI / Automation** | **GitHub Actions** | Workflows in `.github/` run linting",
    "tests and packaging on every push/PR. |\n| **Container / Development environment** | **Docker** (via `.devcontainer/`) | Provides a reproducible VS\u202fCode dev container with all tools pre\u2011installed. |\n| | **VS\u202fCode DevContainer** | The `.devcontainer/` folder defines the container image",
    "extensions",
    "and startup commands for contributors. |\n| | **pre\u2011commit hooks** (`.githooks/`) | Enforce linting / formatting before commits. |\n| **LLM orchestration** | **LangChain** | High\u2011level framework for building LLM\u2011driven agents",
    "chains",
    "and memory. |\n| | **OpenAI SDK** | Direct client for OpenAI\u2019s chat/completion endpoints (used by the agents). |\n| | **Llama\u2011Index** (formerly **LlamaIndex**) | Data\u2011indexing utilities that let agents retrieve context from documents or vector stores. |\n| **Web / API layer** | **FastAPI** | Lightweight async web framework that exposes the agents as HTTP endpoints. |\n| | **Uvicorn** | ASGI server that runs the FastAPI app in production/development. |\n| **Data validation & settings** | **Pydantic** | Models for request/response schemas and configuration validation. |\n| **CLI utilities** | **Click** | Simple command\u2011line interface for running agents locally (`scripts/` entry points). |\n| **Logging** | **Loguru** | Structured",
    "easy\u2011to\u2011use logging throughout the code base. |\n| **HTTP client** | **HTTPX** | Async HTTP client used by the agents to call external services (e.g.",
    "vector\u2011store APIs). |\n| **Retry logic** | **Tenacity** | Provides robust retry/back\u2011off handling for flaky external calls. |\n| **Configuration** | **python\u2011dotenv** | Loads environment variables from `.env` files for API keys",
    "DB URLs",
    "etc. |\n| **Templating** | **Jinja2** | Used in docs/examples to render prompts or configuration snippets. |\n| **",
    "Bash\u202fscripts",
    "GNU\u202fMake (via CTest)",
    "Debian\u202f/\u202fRPM packaging",
    "Shell\u2011completion (bash",
    "zsh",
    "fish)",
    "Doxygen (documentation)",
    "Git (version control)",
    "GitHub\u202fPages (for the rendered README)",
    "CI/CD (GitHub\u202fWorkflows)",
    "and standard POSIX/Linux system libraries (glibc",
    "libpci",
    "libudev",
    "libX11",
    "libwayland\u2011client",
    "libvulkan",
    "etc.).\n\n---\n\n### What each major item does  \n\n| Item | Role / Context in **fastfetch** |\n|------|---------------------------------|\n| **C** | Core implementation language; all system\u2011information collectors",
    "output formatting",
    "and the command\u2011line interface are written in portable C. |\n| **CMake** | Primary build system (`CMakeLists.txt`). Generates native makefiles or Ninja files",
    "handles compiler detection",
    "builds the binary",
    "runs unit\u2011tests (via CTest) and creates install packages. |\n| **GitHub\u202fActions** | Continuous\u2011integration workflow defined in `.github/workflows/`. Builds the project on multiple OS/arch combos",
    "runs the test suite",
    "and produces release artefacts (binary tarballs",
    "Debian/RPM packages). |\n| **Bash scripts** (`run.sh`",
    "various helper scripts in `scripts/`) | Convenience wrappers for quick local builds",
    "test execution",
    "and release packaging; also used for CI steps that need shell commands. |\n| **GNU\u202fMake / CTest** | The test harness (`tests/`) is driven by CTest",
    "which is invoked through the generated Makefile/Ninja build files. |\n| **Debian packaging** (`debian/`) | Contains `debian/control`",
    "`rules`",
    "and other files needed to build a `.deb` package for Debian/Ubuntu. The CI workflow uses these to produce official Debian releases. |\n| **RPM packaging** (implicit) | Although not a dedicated directory",
    "the CI workflow can generate an RPM from the CMake install tree for Fedora/Red\u2011Hat families. |\n| **Shell\u2011completion** (`completions/`) | Pre\u2011written completion scripts for Bash",
    "Zsh",
    "and Fish so that users get tab\u2011completion of options and presets when installing the tool. |\n| **Doxygen** (`doc/` or `CMake` Doxygen target) | Generates API documentation from source\u2011code comments; the `doc/` folder holds the generated HTML/Markdown that is served on GitHub Pages. |\n| **Git** | Version\u2011control system; the repository itself",
    "branching",
    "tags",
    "and release management are all done via Git. |\n| **GitHub\u202fPages** (via the `doc/` folder) | Hosts the rendered README and any generated documentation for easy browsing. |\n| **Standard POSIX/Linux system libraries**"
  ],
  "preferred_project_types": [
    "Web Application",
    "PROJECT TYPE:\u202fQuantitative\u2011Finance\u202fAI/ML Platform (open\u2011source library)",
    "PROJECT TYPE:\u202fAI\u2011Driven Quantitative Finance Platform",
    "PROJECT TYPE:",
    "PROJECT TYPE: Embedded Linux Distribution / Router Firmware",
    "PROJECT TYPE:\u202fPackage Build System / Termux Package Repository",
    "PROJECT TYPE:\u202fPackage Build System / Command\u2011line Tool",
    "PROJECT TYPE: Python library / SDK",
    "PROJECT TYPE: Python library / LLM\u2011agent framework",
    "PROJECT TYPE: Python library / framework for building LLM agents",
    "PROJECT TYPE: Python library / SDK for building controllable LLM agents",
    "PROJECT TYPE: Python library / SDK for LLM agents",
    "PROJECT TYPE: Command\u2011line system information utility"
  ],
  "last_used": "2025-09-08T11:47:10.270193",
  "usage_count": 14
}